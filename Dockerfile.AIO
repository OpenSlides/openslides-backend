# Changes: apt-get in Dockerfile.Dev doesnt use upgrade, now it does
# Change: Removed ARG 'REQUIREMENTS_FILE' and replaced it with a hardcoded ENV that depends on Context
# Change: Development hat jetzt auch ein Healthcheck
# Question: ARG VERSION=dev , what is this? Warum ist das nur in der Prod Dockerfile und nicht in der Development Dockerfile, hat aber dev als Value
# !! Question: --no-install-recommends Flags causes Errors for dev. Prod uses it. How important is this??
#   Dev probably needs to manually install all necessary packages.
# Question: Was macht adduser etc.? Das Ding wirft Fehler
# Question: echo "$VERSION" > openslides_backend/version.txt wirft Error, da Directory nicht existiert

ARG CONTEXT=dev
ARG PYTHON_IMAGE_VERSION=3.10.15

FROM python:${PYTHON_IMAGE_VERSION}-slim-bookworm as base

ARG CONTEXT
ARG PYTHON_IMAGE_VERSION
ARG REQUIREMENTS_FILE_OVERWRITE=""

WORKDIR /app

## Context-based setup
### Add context value as a helper env variable
ENV ${CONTEXT}=1

ENV IGNORE_INSTALL_RECOMMENDS=${prod:+"--no-install-recommends"}
### Query based on context value
ENV CONTEXT_INSTALLS=${tests:+""}${prod:+"libc-dev"}${dev:+"make vim bash-completion"}
### Requirements file will be autoselected, unless an overwrite is given via ARG REQUIEREMENTS_FILE_OVERWRITE
ENV REQUIREMENTS_FILE=${REQUIREMENTS_FILE_OVERWRITE:+$REQUIREMENTS_FILE_OVERWRITE}${REQUIREMENTS_FILE_OVERWRITE:-${tests:+"tests"}${prod:+"production"}${dev:+"development"}}
RUN if [ -z $REQUIREMENTS_FILE_OVERWRITE ]; then REQUIREMENTS_FILE=$REQUIREMENTS_FILE_OVERWRITE; fi

## Install
RUN apt-get -y update && apt-get -y upgrade && \
    apt-get install ${IGNORE_INSTALL_RECOMMENDS} -y curl ncat git mime-support gcc libpq-dev libmagic1 ${CONTEXT_INSTALLS}

# RUN apt-get update && apt-get install --yes make git curl ncat vim bash-completion mime-support gcc libpq-dev libmagic1

COPY requirements/ requirements/
RUN . requirements/export_service_commits.sh && pip install --no-cache-dir --requirement requirements/requirements_${REQUIREMENTS_FILE}.txt

ENV PYTHONPATH /app

ENV EMAIL_HOST postfix
ENV EMAIL_PORT 25
# ENV EMAIL_HOST_USER username
# ENV EMAIL_HOST_PASSWORD secret
# EMAIL_CONNECTION_SECURITY use NONE, STARTTLS or SSL/TLS
ENV EMAIL_CONNECTION_SECURITY NONE
ENV EMAIL_TIMEOUT 5
ENV EMAIL_ACCEPT_SELF_SIGNED_CERTIFICATE false
ENV DEFAULT_FROM_EMAIL noreply@example.com

LABEL org.opencontainers.image.title="OpenSlides Backend Service"
LABEL org.opencontainers.image.description="Backend service for OpenSlides which provides actions and presenters."
LABEL org.opencontainers.image.licenses="MIT"
LABEL org.opencontainers.image.source="https://github.com/OpenSlides/openslides-backend"

HEALTHCHECK CMD curl --fail http://localhost:9002/system/action/health/ || curl --fail http://localhost:9003/system/presenter/health/ || exit 1

EXPOSE 9002
EXPOSE 9003

ENTRYPOINT ["./entrypoint.sh"]



# Production Image
FROM base as prod

#RUN adduser --system --no-create-home appuser
#USER appuser

#COPY --chown=appuser:appuser scripts scripts
#COPY --chown=appuser:appuser entrypoint.sh ./
#COPY --chown=appuser:appuser openslides_backend openslides_backend
#COPY --chown=appuser:appuser meta meta
#COPY --chown=appuser:appuser data data

#ARG VERSION=dev
#RUN echo "$VERSION" > openslides_backend/version.txt

CMD exec python -m openslides_backend




# Development Image
FROM base as dev

COPY dev/.bashrc .
COPY dev/cleanup.sh .

# Copy files which are mounted to make the full stack work
COPY scripts scripts
COPY cli cli
COPY data data
COPY meta meta

COPY Makefile .
COPY setup.cfg .
COPY dev/entrypoint.sh ./

RUN chmod 777 -R .

ENV OPENSLIDES_DEVELOPMENT 1

EXPOSE 5678

STOPSIGNAL SIGKILL
CMD exec python -m debugpy --listen 0.0.0.0:5678 openslides_backend


# Test Image (same as dev)
FROM dev as tests