name: Continuous Integration

on:
  pull_request:
    branches:
      - main
      - 'feature/**'

env:
  PYTHON_VERSION: 3.10.x

jobs:
  build-production-image:
    name: Build and test production docker image
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: .github/docker-compose

    steps:
    - uses: actions/checkout@v2

    - name: Create secrets for datastore
      run: mkdir secrets && echo -n "openslides" > secrets/postgres_password

    - name: Run docker production image
      run: docker-compose -f docker-compose.prod.yml up -d

    - name: Wait for action service
      # we have to execute this inside the container since the port to the outside is opened directly after the
      # container started, while the code itself is not ready yet
      run: docker-compose -f docker-compose.prod.yml exec -T backend-action scripts/wait.sh backend-action 9002

    - name: Wait for presenter service
      # we have to execute this inside the container since the port to the outside is opened directly after the
      # container started, while the code itself is not ready yet
      run: docker-compose -f docker-compose.prod.yml exec -T backend-presenter scripts/wait.sh backend-presenter 9003

    - name: Fire a test request to actions component
      run: curl localhost:9002/system/action/health

    - name: Fire a test request to presenter component
      run: curl localhost:9003/system/presenter/health

  build-and-test-dev-image:
    name: Build and test development docker image with Docker Compose
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Run tests
      run: dev/run-tests.sh

  check-coding-style:
    name: Check coding style
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install requirements
      run: . requirements/export_datastore_commit.sh && pip install --requirement requirements/requirements_development.txt

    - name: Check black
      if: always()
      run: black --check --diff openslides_backend/ tests/ cli/

    - name: Check isort
      if: always()
      run: isort --check-only --diff openslides_backend/ tests/ cli/

    - name: Check flake8
      if: always()
      run: flake8 openslides_backend/ tests/ cli/

    - name: Check mypy
      if: always()
      run: mypy openslides_backend/ tests/ cli/

  check-models-all:
    name: Check from models.yml up to permissions and jsons
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      id: python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install requirements
      id: requirements
      run: . requirements/export_datastore_commit.sh && pip install --requirement requirements/requirements_development.txt

    - name: Validate models.yml
      run: PYTHONPATH=. python cli/modelsvalidator/validate.py

    - name: Check for up tp date models.py
      id: models_py
      run: PYTHONPATH=. python cli/generate_models.py check

    - name: Check initial-data.json
      run: PYTHONPATH=. python cli/check_json.py global/data/initial-data.json

    - name: Check example-data.json
      if: ${{ always() && steps.models_py.outcome == 'success' }}
      run: PYTHONPATH=. python cli/check_json.py global/data/example-data.json

    - name: Check for up to date permissions.py
      if: ${{ always() && steps.python.outcome == 'success' && steps.requirements.outcome == 'success' }}
      run: PYTHONPATH=. python3 cli/generate_permissions.py check
